/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as ctx from './context/index';

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {}

export interface NexusGenEnums {
  AgeLimit: 'ABOVE_18' | 'ABOVE_21' | 'ALL';
}

export interface NexusGenRootTypes {
  Event: {
    // root type
    ageLimit: NexusGenEnums['AgeLimit']; // AgeLimit!
    description: string; // String!
    id: string; // ID!
    name: string; // String!
    venue: string; // String!
  };
  Query: {};
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  AgeLimit: NexusGenEnums['AgeLimit'];
}

export interface NexusGenFieldTypes {
  Event: {
    // field return type
    ageLimit: NexusGenEnums['AgeLimit']; // AgeLimit!
    description: string; // String!
    id: string; // ID!
    name: string; // String!
    venue: string; // String!
  };
  Query: {
    // field return type
    ok: boolean; // Boolean!
  };
}

export interface NexusGenArgTypes {}

export interface NexusGenAbstractResolveReturnTypes {}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = 'Event' | 'Query';

export type NexusGenInputNames = never;

export type NexusGenEnumNames = 'AgeLimit';

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = 'Boolean' | 'Float' | 'ID' | 'Int' | 'String';

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: ctx.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames'];
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames'];
  allNamedTypes:
    | NexusGenTypes['allInputTypes']
    | NexusGenTypes['allOutputTypes'];
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {}
  interface NexusGenPluginSchemaConfig {}
}
